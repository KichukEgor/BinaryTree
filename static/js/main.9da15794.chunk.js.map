{"version":3,"sources":["tree-lib/config.js","components/InputForm.js","components/Node.js","components/Icons.js","components/TreeGraph.js","App.js","index.js"],"names":["options","layout","hierarchical","direction","nodeSpacing","sortMethod","edges","color","width","nodes","shape","interaction","dragNodes","dragView","zoomView","height","physics","enabled","InputForm","_ref","tree","update","_useState","useState","_useState2","_slicedToArray","setEnabled","React","createElement","onSubmit","e","event","preventDefault","insert","target","input","value","toLowerCase","toGraph","InputGroup","className","type","id","placeholder","onChange","length","disabled","Node","parent","arguments","undefined","_classCallCheck","this","counter","left","right","_createClass","key","item","i","isNaN","parseInt","charCodeAt","itemValue","thisValue","index","_convert","addRightChild","addLeftChild","_compareValues","_handleEqual","isRoot","from","to","label","leftRes","concat","_toConsumableArray","rightRes","TrashIcon","_ref$size","size","_ref$color","viewBox","fill","xmlns","fillRule","d","clipRule","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","defaultTree","TreeGraph","setTree","_useState3","_useState4","representation","setRepresentation","_useState5","_useState6","network","setNetwork","_useState7","_useState8","divElement","setDiv","handleResize","useCallback","_asyncToGenerator","_callee","newOptions","_context","clientHeight","setOptions","fit","useEffect","window","addEventListener","handleKeyDown","console","log","code","newValue","Math","floor","random","removeEventListener","newVal","setData","Row","Col","Button","onClick","ref","Graph","updateTrigger","graph","getNetwork","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9da15794.chunk.js","sourcesContent":["export const options = {\n  layout: {\n    hierarchical: {\n      direction: 'UD',\n      nodeSpacing: 150,\n      sortMethod: 'directed'\n    }\n  },\n  edges: {\n    color: '#000000',\n    width: 2\n  },\n  nodes: {\n    shape: 'ellipse'\n  },\n  interaction: {\n    dragNodes: false,\n    dragView: true,\n    zoomView: true\n  },\n  height: 'auto',\n  physics: {\n    enabled: false\n  }\n}\n","import React, { useState } from 'react'\nimport { InputGroup } from 'react-bootstrap'\nimport '../style/treeForm.css'\n\nconst InputForm = ({ tree, update }) => {\n  const [enabled, setEnabled] = useState(false)\n\n  const handleInput = (event) => {\n    event.preventDefault()\n    tree.insert(event.target.input.value.toLowerCase())\n    event.target.input.value = ''\n    update(tree.toGraph())\n    setEnabled(false)\n  }\n\n  const handleChange = (event) => {\n    event.preventDefault()\n    const value = event.target.value.toLowerCase()\n    setEnabled(value.length !== 0)\n  }\n\n  return (\n    <form onSubmit={(e) => handleInput(e)}>\n      <InputGroup>\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          id=\"input\"\n          placeholder=\"Enter number\"\n          onChange={handleChange}\n        />\n        <input\n          type=\"submit\"\n          className=\"btn btn-primary add-btn\"\n          value=\"Add\"\n          disabled={!enabled}\n        />\n      </InputGroup>\n    </form>\n  )\n}\n\nexport { InputForm }\n","import { options } from '../tree-lib/config'\n\nexport class Node {\n  static counter = 0\n\n  constructor(value, parent = null) {\n    this.id = Node.counter\n    Node.counter++\n\n    this.parent = parent\n    this.value = value\n    this.left = null\n    this.right = null\n  }\n\n  _convert(item, i = 0) {\n    return isNaN(item) ? parseInt(item.charCodeAt(i), 10) : parseInt(item, 10)\n  }\n\n  _handleEqual(item, itemValue, thisValue) {\n    if (isNaN(item)) {\n      let index = 1\n      while (itemValue === thisValue) {\n        itemValue = this._convert(item, index)\n        thisValue = this._convert(this.value, index)\n        index++\n\n        if (index >= this.value.length) {\n          this.addRightChild(item)\n          return\n        }\n        if (index >= item.length) {\n          this.addLeftChild(item)\n          return\n        }\n      }\n      if (itemValue === thisValue) {\n        this.addLeftChild(item)\n      } else {\n        this._compareValues(item, itemValue, thisValue)\n      }\n    } else {\n      // same number, insert at left child\n      this.addLeftChild(item)\n    }\n  }\n\n  _compareValues(item, itemValue, thisValue) {\n    if (itemValue < thisValue) {\n      this.addLeftChild(item)\n    } else if (itemValue > thisValue) {\n      this.addRightChild(item)\n    } else {\n      // special case for equality\n      this._handleEqual(item, itemValue, thisValue)\n    }\n  }\n\n  addLeftChild(item) {\n    this.left ? this.left.insert(item) : (this.left = new Node(item, this))\n  }\n\n  addRightChild(item) {\n    this.right ? this.right.insert(item) : (this.right = new Node(item, this))\n  }\n\n  insert(item) {\n    let itemValue = this._convert(item)\n    if (this.value) {\n      let thisValue = this._convert(this.value)\n      this._compareValues(item, itemValue, thisValue)\n    } else {\n      this.value = item\n    }\n  }\n\n  toGraph(isRoot = true) {\n    let edges = this.parent\n      ? [\n          {\n            from: this.parent.id,\n            to: this.id\n          }\n        ]\n      : []\n    let nodes = this.value\n      ? [\n          {\n            id: this.id,\n            label: this.value,\n            shape: isRoot ? 'box' : options.nodes.shape\n          }\n        ]\n      : []\n    if (this.left) {\n      let leftRes = this.left.toGraph(false)\n      edges = [...edges, ...leftRes.edges]\n      nodes = [...nodes, ...leftRes.nodes]\n    }\n    if (this.right) {\n      let rightRes = this.right.toGraph(false)\n      edges = [...edges, ...rightRes.edges]\n      nodes = [...nodes, ...rightRes.nodes]\n    }\n\n    return {\n      nodes,\n      edges\n    }\n  }\n}\n","import React from 'react'\n\nexport const TrashIcon = ({\n  size = 18,\n  color = 'currentColor'\n}) => (\n  <svg\n    className=\"bi bi-trash-fill\"\n    width={size}\n    height={size}\n    viewBox=\"0 0 16 16\"\n    fill={color}\n    xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      fillRule=\"evenodd\"\n      d=\"M2.5 1a1 1 0 00-1 1v1a1 1 0 001 1H3v9a2 2 0 002 2h6a2 2 0 002-2V4h.5a1 1 0 001-1V2a1 1 0 00-1-1H10a1 1 0 00-1-1H7a1 1 0 00-1 1H2.5zm3 4a.5.5 0 01.5.5v7a.5.5 0 01-1 0v-7a.5.5 0 01.5-.5zM8 5a.5.5 0 01.5.5v7a.5.5 0 01-1 0v-7A.5.5 0 018 5zm3 .5a.5.5 0 00-1 0v7a.5.5 0 001 0v-7z\"\n      clipRule=\"evenodd\"/>\n  </svg>\n)\n","import React, { useCallback, useEffect, useState } from 'react'\nimport Graph from 'react-graph-vis'\nimport Col from 'react-bootstrap/Col'\nimport { Button, Row } from 'react-bootstrap'\nimport { InputForm } from './InputForm'\nimport { Node } from './Node'\nimport { TrashIcon } from './Icons'\n\nconst defaultTree = {\n  edges: [],\n  nodes: []\n}\n\nconst TreeGraph = ({ options }) => {\n  const [tree, setTree] = useState(new Node(null))\n\n  const [representation, setRepresentation] = useState(defaultTree)\n\n  const [network, setNetwork] = useState(null)\n  const [divElement, setDiv] = useState(null)\n\n  const handleResize = useCallback(async () => {\n    if (network) {\n      const newOptions = options\n      newOptions.height = `${divElement.clientHeight}px`\n      await network.setOptions(newOptions)\n      network.fit()\n    }\n  }, [network, divElement, options])\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize)\n  })\n\n  useEffect(() => {\n    handleResize()\n  })\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      console.log('resize')\n      if (event.code === 'Space') {\n        const newValue = `${Math.floor(Math.random() * 201) - 100}` // Generate random number in range [-100, 100]\n        tree.insert(newValue)\n        update(tree.toGraph(newValue))\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown)\n\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  })\n\n  const update = (newVal) => {\n    setRepresentation(newVal)\n    if (network) {\n      network.setData(newVal)\n    }\n  }\n\n  const clear = () => {\n    update(defaultTree)\n    setTree(new Node(null))\n  }\n\n  return (\n    <div className=\"container\">\n      <header className=\"header\">\n        <p>\n          <b>Press the space bar</b> to generate a random number ir range [-100, 100]\n        </p>\n        <Row>\n          <Col>\n            <InputForm update={update} tree={tree} />\n          </Col>\n          <Col>\n            <Button className=\"btn btn-danger\" onClick={() => clear()}>\n              <TrashIcon />\n              Clear tree\n            </Button>\n          </Col>\n        </Row>\n      </header>\n      <div>\n        <div\n          ref={(divElement) => {\n            setDiv(divElement)\n          }}\n          className=\"border border-dark graph-container\"\n        >\n          <Graph\n            options={options}\n            updateTrigger={representation}\n            graph={{ edges: [], nodes: [] }}\n            getNetwork={(network) => {\n              setNetwork(network)\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport { TreeGraph }\n","import React from 'react'\nimport { options } from './tree-lib/config'\nimport { TreeGraph } from './components/TreeGraph'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  return <TreeGraph options={options} />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './style/index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}